% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/diagnostics.R
\name{runDiagnostics}
\alias{runDiagnostics}
\title{runDiagnostics}
\usage{
runDiagnostics(learn, diagnose, verbose = 0)
}
\arguments{
\item{learn}{Your function which will create the network. It should accept as a single
argument the historical cases as returned by the Get_Historical_Data function.}

\item{diagnose}{Your function which will use the network created by your learn function
to estimate probabilities of unknown variables in a set of cases.
This function should take two arguments: (1) your network, as returned by your
learn function; and (2) The cases, as returned by the Get_Cases function.}

\item{verbose}{Controls the amount of output printed to console. 0 prints nothing. 1 prints your
time taken. 2 prints the time take plus the mean absolute error (MAE) of your estimates compared with the
true probabilities of the generative model, as well as the MAE of analytics solutions given the historic
data (with Bayesian expectation and maximum likelihood calculations) and the MAE of one precalculated run of
the par function using 1000 samples (as it will in the evaluation) and
one precalculated run of the par model using 5000 samples (to give you an indication of how much
improvement additional samples will make).}
}
\value{
The output from your diagnose function.
}
\description{
The run function for the diagnostics project. You need to pass the two functions indicated in the parameters.
}
\details{
Evaluation will be performed on new, randomly generated cases. Like here, your will get a MAE between your
estimates of your model and the true probabilities from the generative model (the model used to generate
the data).

We will perform 1000 runs using the par function, which performs Metropolis within Gibbs MCMC sampling
on a network trained on the historical data using count parameters that start at one for the
categorical/conditional-categorical distributions, and a maximum likelihood approach for the normal
distribution. To pass your performance (MAE) need to be better than or equal to the worst performing of
these 1000 runs.

All groups will be tested on the sampling that begin after the random seed is again set to a specific
value.

Your code will also need to complete within 60 seconds. The par function using 1000 samples are completes
in about 22 seconds. If code runs slowly on the evaluation machine, you will code will need to complete
quicker than the time taken by the slowest of the 1000 runs plus 25%.

If you want to load the historical cases (training data) or test cases (test data) use data(hist) or data(cases). See information
about this data in the help documentation (?hist or ?Diagnostics::hist)
}
